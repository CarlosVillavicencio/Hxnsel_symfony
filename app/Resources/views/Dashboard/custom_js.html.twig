<script type="text/javascript">
    {#https://www.jqueryscript.net/loading/jQuery-Youtube-Like-Ajax-Progress-Bar-Plugin-ytLoad.html#}
    {#progrees bar durante ajax tipo youtube#}
    $.ytLoad();
    $(document).ajaxStart(function () {
        $('fieldset').attr('disabled', 'disabled');
//        console.log('ajaxStart');
//        $("body").addClass("ajax_loader");
    });
    $(document).ajaxComplete(function () {
        $('fieldset').removeAttr('disabled');
        //        console.log('ajaxComplete');
        //        $("body").removeClass("ajax_loader");
    });
    $(document).ready(function () {
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-bottom-right",
            "preventDuplicates": true,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "10000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
        $(document).on("ajaxComplete", function (e, xhr, settings, exception) {
            if (typeof xhr != 'undefined' && typeof xhr.responseJSON != 'undefined' && xhr.responseJSON !== null && typeof xhr.responseJSON.WebScript != 'undefined') {
                if (xhr.responseJSON.WebScript == 'toast') {
                    toastr.options = {
                        "closeButton": true,
                        "debug": false,
                        "positionClass": "toast-bottom-right",
                        "onclick": null,
                        "showDuration": "1000",
                        "hideDuration": "1000",
                        "timeOut": "5000",
                        "extendedTimeOut": "1000",
                        "showEasing": "swing",
                        "hideEasing": "linear",
                        "showMethod": "fadeIn",
                        "hideMethod": "fadeOut"
                    };
                    toastr[xhr.responseJSON.icono](xhr.responseJSON.texto, xhr.responseJSON.titulo);
                } else {
                    {#es otro tipo de mensaje no toastr#}
                }
            }
        });
//        $('.selectpicker').selectpicker();
//        $(".chosen-select").chosen({
//            width: "100%",
//            no_results_text: "Oops, nothing found!",
//            placeholder: 'sssss'
//        });
        var error_class_form = "has-danger";
        var error_class_div = "form-control-feedback";
        var error_class_input = "form-control-danger";
        var options_validate = {
            wrapper: "div",
            errorClass: error_class_div,
            highlight: function (element, errorClass, validClass) {
                $(element).addClass(error_class_input).removeClass(validClass);
                $(element).parent("div").addClass(error_class_form);
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass(error_class_input).addClass(validClass);
                $(element).parent("div").removeClass(error_class_form);
            },
            onkeyup: false,
        };
        jQuery.validator.setDefaults(options_validate);
//            jQuery.validator.messages.required = "";
        jQuery.validator.messages = {
            "required": "{{ 'jqueryvalidation_org.required'|trans }}",
            "remote": "{{ 'jqueryvalidation_org.remote'|trans }}",
            "email": "{{ 'jqueryvalidation_org.email'|trans }}",
            "url": "{{ 'jqueryvalidation_org.url'|trans }}",
            "date": "{{ 'jqueryvalidation_org.date'|trans }}",
            "dateISO": "{{ 'jqueryvalidation_org.dateISO'|trans }}",
            "number": "{{ 'jqueryvalidation_org.number'|trans }}",
            "digits": "{{ 'jqueryvalidation_org.digits'|trans }}",
            "equalTo": "{{ 'jqueryvalidation_org.equalTo'|trans }}"
        };
        $(".tagsinput").map(function () {
            var source = $(this).attr("data-source");
            if (source != '' && source != undefined) {
                $(this).tagsinput({
                    typeaheadjs: {
                        source: substringMatcher(source.split(',')),
                    }
                });
            } else {
                $(this).tagsinput();
            }
        });
        var language = {
            "sProcessing": "{{ 'datatable.processing'|trans }}",
            "sLengthMenu": "{{ 'datatable.lengthMenu'|trans }}",
            "sZeroRecords": "{{ 'datatable.zeroRecords'|trans }}",
            "sEmptyTable": "{{ 'datatable.emptyTable'|trans }}",
            "sInfo": "{{ 'datatable.info'|trans|raw }}",
            "sInfoEmpty": "{{ 'datatable.infoEmpty'|trans }}",
            "sInfoFiltered": "{{ 'datatable.infoFiltered'|trans }}",
            "sInfoPostFix": "{{ 'datatable.infoPostFix'|trans }}",
            "sSearch": "{{ 'datatable.search'|trans }}",
//        "sUrl": "",
//        "sInfoThousands": ",",
            "sLoadingRecords": "{{ 'datatable.loadingRecords'|trans }}",
            "oPaginate": {
                "sFirst": "{{ 'datatable.paginate.first'|trans }}",
                "sLast": "{{ 'datatable.paginate.last'|trans }}",
                "sNext": "{{ 'datatable.paginate.next'|trans }}",
                "sPrevious": "{{ 'datatable.paginate.previous'|trans }}"
            },
            "oAria": {
                "sSortAscending": "{{ 'datatable.aria.sortAscending'|trans|raw }}",
                "sSortDescending": "{{ 'datatable.aria.sortDescending'|trans|raw }}"
            }
        };
        $.extend(true, $.fn.dataTable.defaults, {
            language: language,
            responsive: true,
            lengthChange: false,
            initComplete: function () {
                var table = this;
                $(table).children('thead[class="thead-for-filters"]').remove();
                var newthead = '<thead class="thead-for-filters"><tr>';
                $(table).children('thead').first().children('tr').children('th').each(function (i) {
                    if ($(this).hasClass('filtro') || $(this).hasClass('xs-hidden')) {
                        var clase = ($(this).hasClass('filtro') ? 'filtro' : 'hidden-xs-down');
                        newthead += '<th class="' + clase + '" style="padding: 5px;"></th>';
                    } else {
                        newthead += '<th></th>';
                    }
                });
                newthead += '</tr></thead>';
                $(table).children('thead').after(newthead);
                var api = this.api();
                $(table).children('thead.thead-for-filters').children('tr').children('th').each(function (i) {
                    if ($(this).hasClass('filtro') || $(this).hasClass('xs-hidden')) {
                        var column = api.column(i);
                        var select = $('<select class="form-control padding_0' + '"><option value="">{{ "genericos.btn.seleccione"|trans }}</option></select>').appendTo($(this)).on('change', function () {
                            var val = $.fn.dataTable.util.escapeRegex(
                                $(this).val());
                            column.search(val ? '^' + val + '$' : '', true, false).draw();
                        });
                        column.data().unique().sort().each(function (d, j) {
                            select.append('<option value="' + d + '">' + d + '</option>')
                        });
                    }
                });

                {#
                this.api().columns('.filtro').every(function () {
                    var column = this;
                    var select = $('<select><option value=""></option></select>')
                        .appendTo($(column.header()).empty())
                        .on('change', function () {
                            var val = $.fn.dataTable.util.escapeRegex(
                                $(this).val()
                            );

                            column
                                .search(val ? '^' + val + '$' : '', true, false)
                                .draw();
                        });

                    column.data().unique().sort().each(function (d, j) {
                        select.append('<option value="' + d + '">' + d + '</option>')
                    });
                });#}
            }
        });
        $('.datatable').DataTable();
    });

    function substringMatcher(strs) {
        return function findMatches(q, cb) {
            var matches, substringRegex;

            // an array that will be populated with substring matches
            matches = [];

            // regex used to determine if a string contains the substring `q`
            substrRegex = new RegExp(q, 'i');

            // iterate through the pool of strings and for any string that
            // contains the substring `q`, add it to the `matches` array
            $.each(strs, function (i, str) {
                if (substrRegex.test(str)) {
                    matches.push(str);
                }
            });

            cb(matches);
        };
    }
</script>